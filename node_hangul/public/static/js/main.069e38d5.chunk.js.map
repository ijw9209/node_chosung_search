{"version":3,"sources":["components/Header.js","components/LeftPanel.js","components/RightPanel.js","config/Constants.js","lib/axiosRequest.js","App.js","serviceWorker.js","index.js"],"names":["Header","text","Box","display","alignItems","justifyContent","height","width","fontSize","bgcolor","brown","LeftPanel","workers","smallFontSize","length","mediumFontSize","bigFontSize","flexGrow","flexBasis","component","textAlign","flexDirection","flexWrap","map","worker","flex","m","overflow","pid","words","toLocaleString","style","mem","useStyles","makeStyles","theme","root","backgroundColor","palette","background","paper","gridList","icon","color","RightPanel","master","currentLog","lastIndexedCount","searching","logStyle","flexShrink","lastIndexedDate","textOverflow","log","marginLeft","marginTop","cacheHit","eventTime","userId","ip","elapsed","resultCount","Tooltip","title","keyword","constants","SOCKET_NAMESPACE","urls","axiosRequest","get","type","url","CONSTANTS","Promise","resolve","success","msg","axios","response","status","console","data","error","BrownButton","withStyles","Button","App","state","endpoint","Constants","socket","socketIOClient","on","this","updateMasterMonitor","bind","updateWorkerMonitor","updateLogMonitor","resetState","masterMonitor","setState","workerMonitor","logMonitor","result","className","onClick","onClickLoad","variant","size","onClickClear","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.069e38d5.chunk.js","sourcesContent":["import React from 'react';\r\nimport Box from '@material-ui/core/Box';\r\nimport {brown} from '@material-ui/core/colors';\r\n\r\nexport default function Header({text}) {\r\n    return (\r\n      <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\" height=\"10vh\" width=\"100%\" fontSize=\"h3.fontSize\" bgcolor={brown[900]}>\r\n        <div>{text}</div>\r\n      </Box>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport Box from '@material-ui/core/Box';\r\nimport {brown} from '@material-ui/core/colors';\r\n\r\nexport default function LeftPanel({workers}) {\r\n  const smallFontSize = `${12 - (workers.length/3)}px`;\r\n  const mediumFontSize = `${15 - (workers.length/3)}px`;\r\n  const bigFontSize = `${25 - (workers.length/3)}px`;\r\n\r\n  return (\r\n      <Box flexGrow={1} flexBasis={0} bgcolor={brown[800]}>\r\n        <Box component=\"div\" textAlign=\"center\">workers</Box>\r\n        <Box component=\"div\" display=\"flex\" width=\"100%\" flexDirection=\"row\" justifyContent=\"center\" flexWrap=\"wrap\">\r\n          {workers.map(worker => \r\n            <Box flex=\"initial\" display=\"flex\" justifyContent=\"center\" alignItems=\"center\" flexDirection=\"row\" \r\n                  width={workers.length < 10 ? '30%':'20%'} \r\n                  height={28-workers.length + 'vh'} m={1} fontSize={mediumFontSize} bgcolor={brown[700]}>\r\n              <Box display=\"flex\" overflow=\"auto\" justifyContent=\"flex-start\" flexDirection=\"column\" textAlign=\"left\">\r\n                <div>PID: {worker.pid}</div>\r\n                <div>WORDS: {worker.words.toLocaleString()}</div>\r\n                <p></p>\r\n                <Box textAlign=\"center\" style={{fontSize:smallFontSize}}>MEM</Box>\r\n                <div style={{fontSize:bigFontSize}}>{worker.mem}</div>\r\n              </Box>\r\n            </Box>\r\n          )}\r\n        </Box>\r\n      </Box>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport Box from '@material-ui/core/Box';\r\nimport {teal} from '@material-ui/core/colors';\r\nimport {brown} from '@material-ui/core/colors';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n    justifyContent: 'space-around',\r\n    overflow: 'hidden',\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n  gridList: {\r\n    width: '100%',  \r\n    height: '100%',\r\n  },\r\n  icon: {\r\n    color: 'rgba(255, 255, 255, 0.54)',\r\n  },\r\n}));\r\n\r\nexport default function RightPanel({master, currentLog}) {\r\n  // console.log('render master')\r\n  const classes = useStyles();\r\n  const lastIndexedCount = master.lastIndexedCount ? master.lastIndexedCount : 0;\r\n  const {searching = 0} = master;\r\n  const logStyle = {display:'flex', flexGrow:0, flexShrink:1, flexBasis:\"130px\", overflow:'hidden'};\r\n  return (\r\n    <Box  display=\"flex\" flexDirection=\"column\" justifyContent=\"flex-start\" alignItems=\"center\" flexGrow={1} flexBasis={0} bgcolor={brown[800]}>\r\n        <Box component=\"div\">master</Box>\r\n        <Box display=\"flex\" width=\"100%\" alignItems=\"center\" justifyContent=\"space-around\" flexDirection=\"row\" height=\"20vh\" m={1}  fontSize=\"fontSize\" bgcolor={brown[700]}>\r\n          <Box display=\"flex\" justifyContent=\"flex-start\" flexDirection=\"column\" m={2} textAlign=\"left\">\r\n            <div>PID: {master.pid}</div> \r\n            <div>MEM: {master.mem}</div>\r\n            <p></p>\r\n            <div>TOTAL INDEXED : {lastIndexedCount.toLocaleString()}</div>\r\n            <div>LAST INDEXED DATE: {master.lastIndexedDate}</div>\r\n\r\n          </Box>\r\n          <Box>\r\n             <div style={{fontSize:\"12px\"}}>Searching</div>\r\n             <div style={{fontSize:\"60px\"}}>{searching}</div> \r\n          </Box> \r\n        </Box>\r\n        <Box component=\"div\" overflow=\"auto\" textOverflow=\"ellipsis\" width=\"100%\" height=\"100vh\" fontSize=\"fontSize\" bgcolor={brown[700]}>\r\n          {currentLog.map(log => (\r\n            <div style={{display:\"flex\", marginLeft:\"10px\", marginTop:'3px', flexDirection:\"row\", justifyContent:\"flex-start\", height:\"1.2em\", color: log.cacheHit && 'cyan'}}>\r\n              <div style={logStyle}>{log.eventTime}</div>\r\n              <div style={logStyle}>{log.userId}</div>\r\n              <div style={logStyle}>{log.ip}</div>\r\n              <div style={logStyle}>{log.elapsed}초</div>\r\n              <div style={logStyle }>{log.resultCount}건</div>\r\n              <Tooltip title={log.keyword}>\r\n                <div style={{display:'flex', flexShrink:0, flexBasis:\"auto\", width:'300px', overflow:'hidden', textOverflow:'ellipsis'}}>{log.keyword}</div>\r\n              </Tooltip>\r\n            </div>\r\n          ))}\r\n\r\n        </Box>\r\n    </Box>\r\n  )\r\n}\r\n","const constants = {   \r\n    SOCKET_NAMESPACE : '/',\r\n    urls : {\r\n        'load': '/loadSong/useWorkers',\r\n        'clear': '/clearSong'\r\n    }\r\n}\r\n\r\nexport default constants;","import axios from 'axios';\r\nimport CONSTANTS from '../config/Constants';\r\n\r\nconst axiosRequest = {\r\n    async get(type){\r\n        try {\r\n            const url = CONSTANTS.urls[type];\r\n            if(!url) return Promise.resolve({success:false, msg:`not valid type : ${type}`});\r\n            const response = await axios.get(url);\r\n            if(response.status === 200){\r\n                console.log(response.data)\r\n                return response.data;\r\n            }\r\n        } catch (err) {\r\n            console.error(err);\r\n\r\n        }\r\n    },\r\n}\r\n\r\nexport default axiosRequest;","import React, {Component} from 'react';\r\nimport Box from '@material-ui/core/Box';\r\nimport Button from '@material-ui/core/Button';\r\nimport socketIOClient from 'socket.io-client';\r\nimport Header from './components/Header';\r\nimport LeftPanel from './components/LeftPanel';\r\nimport RightPanel from './components/RightPanel';\r\nimport Constants from './config/Constants';\r\nimport {brown} from '@material-ui/core/colors';\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport axiosRequest from './lib/axiosRequest';\r\nimport './App.css';\r\n\r\n\r\nconst BrownButton = withStyles({\r\n  root: {\r\n    backgroundColor: brown[800],\r\n    '&:hover': {\r\n      backgroundColor: brown[500],\r\n    },\r\n    '&:active': {\r\n      backgroundColor: brown[300]\r\n    },\r\n  }\r\n})(Button)\r\n\r\nexport default class App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      master : {},\r\n      workers : [],\r\n      currentLog : []\r\n    }\r\n  }  \r\n  \r\n  componentDidMount(){\r\n    // connect socket server\r\n    const {endpoint} = Constants.SOCKET_NAMESPACE;\r\n    const socket = socketIOClient(endpoint);\r\n    socket.on('connect', () => {\r\n      console.log('socket connected');\r\n    })\r\n    socket.on('masterMonitor', this.updateMasterMonitor.bind(this));\r\n    socket.on('workerMonitor', this.updateWorkerMonitor.bind(this));\r\n    socket.on('logMonitor', this.updateLogMonitor.bind(this));\r\n    socket.on('error', this.resetState.bind(this));\r\n    socket.on('disconnect', this.resetState.bind(this));\r\n    socket.on('connect_error', this.resetState.bind(this));\r\n  }\r\n\r\n  updateMasterMonitor(masterMonitor){\r\n    // console.log('update master:',masterMonitor)\r\n    this.setState({\r\n      ...this.state,\r\n      master: masterMonitor\r\n    })\r\n  }\r\n\r\n  updateWorkerMonitor(workerMonitor){\r\n    //console.log('update workers:',workerMonitor)\r\n    this.setState({\r\n      ...this.state,\r\n      workers: workerMonitor\r\n    })\r\n  }\r\n\r\n  updateLogMonitor(logMonitor){\r\n    console.log('update log:',logMonitor)\r\n    this.setState({\r\n      ...this.state,\r\n      currentLog: logMonitor\r\n    })\r\n  }\r\n\r\n  resetState(){\r\n    this.setState({\r\n      master : {},\r\n      workers : [],\r\n      currentLog : []\r\n    })\r\n  }\r\n\r\n  async onClickLoad(){\r\n    const result = await axiosRequest.get('load');\r\n    console.log(result);\r\n  }\r\n\r\n  async onClickClear(){\r\n    const result = await axiosRequest.get('clear');\r\n    console.log(result);\r\n  }\r\n\r\n  render() {\r\n    const {workers, master, currentLog} = this.state;\r\n    return (\r\n      <div className=\"App\">\r\n        <Header text={\"Status\"}></Header>\r\n        <Box height=\"80vh\" display=\"flex\" alignItems=\"stretch\" flexDirection=\"row\">\r\n          <RightPanel master={master} currentLog={currentLog}></RightPanel>\r\n          <LeftPanel workers={workers}></LeftPanel>\r\n        </Box>\r\n        <Box height=\"10vh\" display=\"flex\" justifyContent=\"space-around\" flexDirection=\"row\" alignItems=\"center\" bgcolor={brown[900]}>\r\n          <BrownButton onClick={this.onClickLoad} variant=\"contained\" color=\"primary\" size=\"medium\">load</BrownButton> \r\n          <BrownButton onClick={this.onClickClear} variant=\"contained\" color=\"primary\" size=\"medium\">clear</BrownButton>\r\n        </Box>\r\n      </div>\r\n    )\r\n  }\r\n} ","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}