#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('node_db2:server');
const http = require('http');
const path = require('path');
const sockApp = require('../socket/main');
const master = require('../lib/masterEngine');
const monitor = require('../lib/monitor.js');
const monitorUtil = require('../lib/monitorUtil');
const workerModule = path.join(__dirname, '../', 'lib/searchEngine.js');
const cacheModule = path.join(__dirname, '../', 'lib/cacheEngine.js');
const getMemInfo = require('../lib/getMemInfo');

/**
 * Get port from environment and store in Express.
 */
async function main(){

  var port = normalizePort(global.PORT);
  app.set('port', port);

  /**
   * Create HTTP server.
   */

  var server = http.createServer(app);

  /*
  * Create Socket.io Server.
  */

  const io = require('socket.io')(server);

  // In the router, you can broadcast message using req.app.get('io').sockets.emit()
  // In the router, you can emit message to specific client using req.app.get('io').sockets.connected[socketid].emit()
  app.set('io',io); 
  app.set('sockets', io.sockets);
  const socketServer = sockApp.createServer(io);
  const defaultNotifcationOption = {
    enabled: true,
    bcastIO: io
  }

  // create log monitor (to broadcast serach and cache hit history using socket.io)
  const logMonitorOptions = {
    initialStatus: {
      log: []
    },
    notification: {
      ...defaultNotifcationOption, 
      bcastDefaultEventName:'logMonitor'
    }
  }

  const logMonitor = monitor.createMonitor(logMonitorOptions);
  global.logger.debug(`logMonitor initial status:`, logMonitor.getStatus()['log']);

  const masterMonitorOptions = {
    initialStatus: {
      lastIndexedDate : '',
      lastIndexedCount : 0,
      lastIndexedPercent : '0%',
      indexingStatus : 'NOT_INDEXED', // 'NOT_INDEXED', 'INDEXING', 'INDEX_DONE'
      pid : process.pid,
      mem : getMemInfo(),
      searching : 0
    },
    notification: {
      ...defaultNotifcationOption, 
      bcastDefaultEventName:'masterMonitor'
    } 
  }
  const masterMonitor = monitor.createMonitor(masterMonitorOptions);
  global.logger.debug(`masterMonitor initial status:`, masterMonitor.getStatus());

  app.set('masterMonitor', masterMonitor);
  app.set('logMonitor', logMonitor);

  const masterEngine = master.initMaster({
    maxWorkers : global.NUMBER_OF_WORKER,
    searchModule : workerModule,
    maxCache : global.NUMBER_OF_CACHE,
    cacheModule : cacheModule
  })
  app.set('masterEngine', masterEngine);

  // make monitor instance for worker to get/set monitor status and broadcast status
  const workersMonitor = masterEngine.searchManager.workers.map(worker => monitorUtil.mkWorkerMonitor({pid:worker.pid, defaultNotifcationOption}));
  const cacheWorkersMonitor = masterEngine.cacheManager.workers.map(worker => monitorUtil.mkCacheWorkerMonitor({pid:worker.pid, defaultNotifcationOption}));
  global.logger.debug(`workersMonitor initial status:`, workersMonitor[0].getStatus());
  app.set('workersMonitor', workersMonitor);
  app.set('cacheWorkersMonitor', cacheWorkersMonitor);

  socketServer.setMonitorStores({logMonitor, masterMonitor, workersMonitor, cacheWorkersMonitor});
  socketServer.startBroadcastLoop(global.MONITOR_BROADCAST_INTERVAL);
  monitorUtil.loopSetStatus.master(masterMonitor, global.MONITOR_BROADCAST_INTERVAL);
  monitorUtil.loopSetStatus.workers(app, workersMonitor, global.MONITOR_BROADCAST_INTERVAL);
  monitorUtil.loopSetStatus.cacheWorkers(app, cacheWorkersMonitor, global.MONITOR_BROADCAST_INTERVAL);

  /**
   * Listen on provided port, on all network interfaces.
   */

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);

  // set max request timeout
  // server.setTimeout(global.EXPRESS_REQ_TIMEOUT);
  /**
   * Normalize a port into a number, string, or false.
   */

  function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
      // named pipe
      return val;
    }

    if (port >= 0) {
      // port number
      return port;
    }

    return false;
  }

  /**
   * Event listener for HTTP server "error" event.
   */

  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    var bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
  }

  /**
   * Event listener for HTTP server "listening" event.
   */

  function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
    debug('Listening on ' + bind);
  }
}

main();

